% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nearest_point_geo.R
\name{get_nearest_point}
\alias{get_nearest_point}
\title{get_nearest_point}
\usage{
get_nearest_point(data, data.x, data.y, query, n = 1,
  ellipsoid = c("AA", "AN", "??", "BR", "BN", "CC", "CD", "EB", "EA",
  "EC", "EF", "EE", "ED", "RF", "HE", "HO", "ID", "IN", "KA", "AM", "FA",
  "SA", "WD", "WE"), duplicate = FALSE)
}
\arguments{
\item{data}{An input data frame or matrix containing longitude and latitude
coordinates of village locations from which to find nearest neighbour}

\item{data.x}{A character value specifying the variable name in \code{data}
containing the longitude coordinates}

\item{data.y}{A character value specifying the variable name in \code{data}
containing the latitude coordinates}

\item{query}{an object of class `SpatialPoints` containing sampling point
locations. This is usually the output from applying `spsample()` function
from package `gstat` to create an even spatial sample across the entire
sampling area}

\item{n}{Number of nearest villages to select}

\item{ellipsoid}{Two letter character value specifying the reference ellipsoid
to use for distance calculations}

\item{duplicate}{Logical. Specify if duplicate selected villages are to be
kept or discarded. Default is FALSE (discard).}
}
\value{
A subset data frame of \code{data} of selected villages/communities
    nearest to the sampling points with a new variable \code{d} indicating
    the distance of the village/community to the sampling point (in kms). If
    \code{duplicate} is TRUE, the result has number of rows equal to
    \code{nrow(query)}
}
\description{
Function to select nearest community to a given sampling point (usually the
centroid of a square grid for CSAS or of a hexagonal grid for S3M) using
geodesic calculations based on a specified reference ellipsoid
}
\examples{
# Use get_nearest_point() with test sampling points in Sennar to find 3 nearest
#communities from the sampling points
sennar <- subset(sudan01, STATE == "Sennar")
samp.points <- sp::spsample(sennar, type = "hexagonal", n = 10)
get_nearest_point(data = sennar_villages, data.x = "x", data.y = "y",
                  query = samp.points, n = 3)

}
\author{
Ernest Guevarra <ernest@guevarra.io>
}
